diff -NaBur -x .git GLM-orig/Makefile GLM/Makefile
--- GLM-orig/Makefile	2018-12-12 10:45:21.924885372 +0800
+++ GLM/Makefile	2019-08-01 09:11:42.431092540 +0800
@@ -243,6 +243,7 @@
      ${objdir}/glm_types.o \
      ${objdir}/glm_const.o \
      ${objdir}/glm_debug.o \
+     ${objdir}/glm_bubbler.o \
      ${objdir}/glm_main.o
 
 ifeq ($(USE_DL),true)
diff -NaBur -x .git GLM-orig/src/glm_bubbler.c GLM/src/glm_bubbler.c
--- GLM-orig/src/glm_bubbler.c	1970-01-01 08:00:00.000000000 +0800
+++ GLM/src/glm_bubbler.c	2019-08-01 09:11:42.431092540 +0800
@@ -0,0 +1,1424 @@
+/******************************************************************************
+ *                                                                            *
+ * glm_bubbler.c                                                              *
+ *                                                                            *
+ * Developed by :                                                             *
+ *     AquaticEcoDynamics (AED) Group                                         *
+ *     School of Agriculture and Environment                                  *
+ *     The University of Western Australia                                    *
+ *                                                                            *
+ *     http://aquatic.science.uwa.edu.au/                                     *
+ *                                                                            *
+ * Copyright 2018 -  The University of Western Australia                      *
+ *                                                                            *
+ *  This file is part of GLM (General Lake Model)                             *
+ *                                                                            *
+ *  GLM is free software: you can redistribute it and/or modify               *
+ *  it under the terms of the GNU General Public License as published by      *
+ *  the Free Software Foundation, either version 3 of the License, or         *
+ *  (at your option) any later version.                                       *
+ *                                                                            *
+ *  GLM is distributed in the hope that it will be useful,                    *
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of            *
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
+ *  GNU General Public License for more details.                              *
+ *                                                                            *
+ *  You should have received a copy of the GNU General Public License         *
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.     *
+ *                                                                            *
+ ******************************************************************************/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <math.h>
+
+#include "glm.h"
+#include "glm_globals.h"
+#include "glm_util.h"
+#include "glm_layers.h"
+#include "glm_mixu.h"
+#include "glm_deep.h"
+#include "glm_input.h"
+#include "glm_const.h"
+#include "glm_bubbler.h"
+
+#include "aed_time.h"
+
+#define SQRT_Pi sqrt(Pi_)
+#define SQRT_Two sqrt(2.0)
+
+#define SQR(x) ((x)*(x))
+#define CUBE(x) ((x)*(x)*(x))
+
+#ifdef _VISUAL_C_
+#define ALLOCATE1D_I(dst, cnt) dst=malloc(sizeof(int) * (cnt))
+#define ALLOCATE1D_R(dst, cnt) dst=malloc(sizeof(AED_REAL) * (cnt))
+#define ALLOCATE2D(dst, cnt1, cnt2) dst=malloc(sizeof(AED_REAL) * (cnt1) * (cnt2))
+#endif
+
+
+/******************************************************************************/
+
+LOGICAL     bubbler_on        = FALSE;
+char       *bubbler_data_file = NULL;
+AED_REAL    bubbler_aflow     = 0.0;
+int         bubbler_nports    = 0;
+AED_REAL    bubbler_bublen    = 0.0;
+AED_REAL    bubbler_bdepth    = 0.0;
+LOGICAL     bubbler_opopt     = FALSE;
+AED_REAL    bubbler_ton       = 0.0;
+AED_REAL    bubbler_toff      = 0.0;
+LOGICAL     bubbler_intopt    = FALSE;
+char       *bubbler_start     = NULL;
+char       *bubbler_stop      = NULL;
+LOGICAL     bubbler_eff       = FALSE;
+char       *bubbler_eff_file  = NULL;
+
+
+
+//# Bubbler efficiency variables
+static AED_REAL tMean, tMeanS;
+static AED_REAL tEffic1, tEffic2, tEffic3, tPn, tTDiff, tHTRise, tFlowT;
+static AED_REAL aEffic1, aEffic2,          aPn, aTDiff, aHTRise, aFlowT;
+
+static AED_REAL timeOn;
+static int  bSecs, nTimeSteps;
+static FILE *ueff = NULL, *uair = NULL;
+
+static AED_REAL PeI, PeF, xMeI, xMeF, zCI, zCF;
+static AED_REAL cee, WISO, effic1, effic2, effic3;
+static AED_REAL xPerI, xPerF, xVolR;
+static AED_REAL htRise;
+
+static AED_REAL lm2, lambda, pWidth, alp2, ub2d, ub2;
+
+static const AED_REAL one = 1.0, ten = 10.0;
+
+/*############################################################################*/
+
+static AED_REAL aFlow;
+static AED_REAL bDepth;
+static AED_REAL bubLen;
+static AED_REAL tOn;
+static AED_REAL tOff;
+static AED_REAL cdifBeg;
+
+static int nPorts;
+static int iDayStart;
+static int iDayFinish;
+static int bLevel;
+
+static int ibub;
+static LOGICAL opopt, eff, intopt, bubOn, bubprint;
+
+static char *fair = NULL;
+static char *feff = NULL;
+
+#define nStepY   10
+
+/*============================================================================*/
+static void pe3(AED_REAL *_xp, AED_REAL *_zc, AED_REAL *_xmas, AED_REAL BDE,
+                                       AED_REAL *_xper, AED_REAL *_xvolr);
+
+static void inBubble(LOGICAL intopt, int MaxNSy);
+
+static void InActRK4(AED_REAL *Y, AED_REAL *DYDX, int N, AED_REAL H,
+              AED_REAL *YOUT, AED_REAL B0, AED_REAL SQLAM, AED_REAL DRH,
+              AED_REAL ALP, AED_REAL W0, AED_REAL FLOW, AED_REAL PA,
+              AED_REAL UB, AED_REAL SMALLZ,
+              AED_REAL RHO0, AED_REAL TH0, int DIM);
+
+static void InDepRK4(AED_REAL *Y, AED_REAL *DYDX, int N, AED_REAL H,
+              AED_REAL *YOUT, AED_REAL B0, AED_REAL SQLAM, AED_REAL DRH,
+              AED_REAL ALP, AED_REAL W0, AED_REAL FLOW, AED_REAL PA,
+              AED_REAL UB, AED_REAL SMALLZ,
+              AED_REAL RHO0, AED_REAL TH0);
+
+static void InActDrv(AED_REAL X, AED_REAL *Y, AED_REAL *DYDX, AED_REAL B0,
+              AED_REAL SQLAM, AED_REAL DRH, AED_REAL ALP, AED_REAL W0,
+              AED_REAL FLOW, AED_REAL PA, AED_REAL UB, AED_REAL SMALLZ,
+              AED_REAL RHO0, AED_REAL TH0, int DIM);
+
+static void InDepDrv(AED_REAL X, AED_REAL *Y, AED_REAL *DYDX, AED_REAL B0,
+              AED_REAL SQLAM, AED_REAL DRH, AED_REAL ALP, AED_REAL W0,
+              AED_REAL FLOW, AED_REAL PA, AED_REAL UB, AED_REAL SMALLZ,
+              AED_REAL RHO0, AED_REAL TH0);
+
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
+void init_bubbler()
+{
+    int secs1, secs2;
+    bSecs = 0;
+
+    //# Variables for changes to the efficiency files
+    nTimeSteps = 0;
+    bubprint = FALSE;
+
+    ibub = -1;
+
+    //# Initialise bubbler details
+    intopt = FALSE;
+    timeOn = 0.0;
+    aFlow = 0.0001;
+    bDepth = 0.0;
+    bubLen = 1.0;
+    nPorts = 1;
+
+    if (bubOn) {
+        printf("Bubbler is ON\n");
+        bubprint = TRUE;
+
+        bubOn  = bubbler_on;
+        fair   = bubbler_data_file;
+        aFlow  = bubbler_aflow;
+        nPorts = bubbler_nports;
+        bubLen = bubbler_bublen;
+        bDepth = bubbler_bdepth;
+        opopt  = bubbler_opopt;
+        tOn    = bubbler_ton;
+        tOff   = bubbler_toff;
+        intopt = bubbler_intopt;
+        read_time_string(bubbler_start, &iDayStart, &secs1);
+        read_time_string(bubbler_stop, &iDayFinish, &secs2);
+        eff    = bubbler_eff;
+        feff   = bubbler_eff_file;
+
+        ibub = 0;
+
+        //# Bubbler efficiency file setup
+        if (eff) {
+            ueff = fopen(feff, "w");
+
+            fprintf(ueff, "JDAY, EFFECT, T DIFF, C, HT RISE, aFlow, EFFIC\n");
+        }
+    }
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
+void do_bubbler(int jday, int iclock)
+{
+    AED_REAL tDiff;
+    int i;
+
+    if ( ! bubOn ) return;
+
+    //# Bubbler calculations
+    if (ibub >= 0) {
+        /**********************************************************************
+         * Install bubble, get pe etc                                         *
+         * Test for operation of bubbler                                      *
+         * Test that JDAY falls within period of bubbler operation            *
+         * Calculate the time step                                            *
+         **********************************************************************/
+        for (i = surfLayer; i > botmLayer; i--) {
+            if (Lake[i].Height >= bDepth) bLevel = i;
+        }
+
+        if (bLevel == surfLayer)
+            tDiff = 0.0;
+        else
+            tDiff = Lake[surfLayer].Temp - Lake[bLevel+1].Temp;
+
+        /**********************************************************************
+         * Bubbler optimisation                                               *
+         * if tDiff GT Delta T (BUBBLER ON) { TURN BUBBLER ON                 *
+         * if tDiff LT Delta T (BUBBLER OFF) { TURN BUBBLER OFF               *
+         * } else { LEAVE AS FOR PREVIOUS DAY                                 *
+         * Note: pe's from s/r pe3 are based on area calculations             *
+         *       from TABLE.  Units of area (in TABLE) are 10**6 sq.m         *
+         *       Therefore this multiplier needs to be used on                *
+         *       everything that comes out of pe3                             *
+         **********************************************************************/
+        if (jday >= iDayStart && jday <= iDayFinish) {
+            if (opopt) {
+                if (! bubOn && tDiff > tOn) bubOn = TRUE;
+                if (tDiff < tOff) bubOn = FALSE;
+            } else {
+                bubOn = TRUE;
+            }
+            if (aFlow <= 0.0) bubOn = FALSE;
+        } else {
+            bubOn = FALSE;
+        }
+
+        if (iclock == 0) {
+            bSecs = 0;
+            tEffic1 = 0.0;
+            tEffic2 = 0.0;
+            tEffic3 = 0.0;
+            tPn = 0.0;
+            tTDiff = 0.0;
+            tHTRise = 0.0;
+            tFlowT = 0.0;
+        }
+
+        if (bubOn) {
+            effic1 = 0.;
+            effic2 = 0.;
+            effic3 = 0.;
+            ibub = ibub+1;
+
+            pe3(&PeI, &zCI, &xMeI, bDepth, &xPerI, &xVolR);
+
+            if (ibub == 1)
+                cdifBeg = PeI;
+
+            inBubble(intopt, nStepY*MaxLayers);
+
+            check_layer_stability();
+            check_layer_thickness();
+            pe3(&PeF, &zCF, &xMeF, bDepth, &xPerF, &xVolR);
+
+            //# Change in PE as we proceed
+            //# Mechanical efficiency
+            //# Isothermal compression work of compressor
+            WISO = 2.303 * (1.0) * aFlow * noSecs *
+                              log10((Lake[surfLayer].Height+10.2)/10.2) * 1.E5;
+            effic2 = (xPerF-xPerI) * 9.81 * 1.E6 / WISO;
+
+            //# change in pe based on initial stratification
+            //# effic3 = (xPerF*1.e6-peibeg)/(pembeg-peibeg)
+            //# try using difference between c.o.m and c.o.v
+            effic3 = PeF/cdifBeg;
+
+            bSecs = bSecs + noSecs;
+            tEffic1 = tEffic1 + effic1 * (noSecs);
+            tEffic2 = tEffic2 + effic2 * (noSecs);
+            tEffic3 = tEffic3 + effic3 * (noSecs);
+            tPn = tPn + cee * (noSecs);
+            tTDiff = tTDiff + tDiff * (noSecs);
+            tHTRise = tHTRise + htRise * (noSecs);
+            tFlowT = tFlowT + aFlow * (noSecs);
+
+            //# Calculate mean and variance of tDiff
+            timeOn = timeOn + (noSecs) / 86400.0;
+            nTimeSteps = nTimeSteps + 1;
+            tMean = tMean + tDiff;
+            tMeanS = tMeanS + tDiff * tDiff;
+        }
+    }
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
+void read_bubbler(int jday)
+{
+    //# Input from bubbler file if required
+    if ( bubOn && jday >= iDayStart && jday <= iDayFinish) {
+        read_bubble_data(jday, &aFlow, &nPorts, &bDepth, &bubLen);
+        if (aFlow <= 0.0) bubOn = FALSE;
+    }
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
+void write_bubbler(int jday)
+{
+    if ( ! bubOn ) return;
+
+    //# Bubbler efficiency file writing
+    //# Write daily bubbler stuff if required
+    if (eff && ueff!=NULL) {
+        aEffic1 = tEffic1/(bSecs);
+        aEffic2 = tEffic2/(bSecs);
+        aPn = tPn/(bSecs);
+        aTDiff = tTDiff/(bSecs);
+        aHTRise = tHTRise/(bSecs);
+        aFlowT = tFlowT;
+
+        fprintf(ueff, "%d, %12.3f, %12.3f, %12.3f, %12.3f, %12.3f, %12.3f\n",
+                          jday, aEffic1, aTDiff, aPn, aHTRise, aFlowT, aEffic2);
+    }
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
+void print_bubbler()
+{
+    if ( ! bubOn ) return;
+
+    if (bubprint && eff) {
+        //# Check whether an efficiency file exists, and is opened
+        //# If so, then need to write out all the data read in
+        if ( ueff != NULL ) {
+            //# Check whether writing bubbler data from keyboard or file
+            if (uair != NULL )
+                fprintf(ueff,
+                       "Bubbler Information\nInput File is \"%s\" Time On = %8.2f days\n",
+                                  fair, timeOn);
+            else
+                fprintf(ueff, " Air Flow = %10.4f No. Ports = %5d Time On = %8.2f days\n",
+                                  aFlow, nPorts, timeOn);
+        }
+    }
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
+void done_bubbler()
+{
+    if ( ! bubOn ) return;
+
+    fclose(uair);
+    fclose(ueff);
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
+
+/******************************************************************************
+ *                                                                            *
+ *  This gets the PE stored above the level of BDEP (Includes the layer       *
+ *  containing BDEP)                                                          *
+ *                                                                            *
+ * NOTE: All totals are relative to BDEP                                      *
+ *                                                                            *
+ * Variable Dictionary                                                        *
+ *                                                                            *
+ *     XP=(Centre of mass-Centre of vol)*g                                    *
+ *     ZC=Centre of volume                                                    *
+ *     XMAS=Total mass above bubbler                                          *
+ *     XVOL=Total vol above bubbler                                           *
+ *     XPE=Potential energy/g                                                 *
+ *                                                                            *
+ ******************************************************************************/
+void pe3(AED_REAL *_xp, AED_REAL *_zc, AED_REAL *_xmas, AED_REAL BDE,
+                                       AED_REAL *_xper, AED_REAL *_xvolr)
+{
+    AED_REAL  XP = *_xp, ZC = *_zc, XMAS = *_xmas;
+    AED_REAL  XPER = *_xper, xVolR = *_xvolr;
+
+    DOUBLETYPE X, Y, ZCVP;
+    DOUBLETYPE AB, HB, DA, HT, DENS;
+    DOUBLETYPE YB, XVOL, XVOLP, XMASSP;
+    DOUBLETYPE XPE, ZCV, XMASS, BDEP;
+
+    int i, ij, il, ix, L, IBDEP, ik;
+
+/*----------------------------------------------------------------------------*/
+
+    IBDEP = 0;
+    DENS = 0.;
+
+    BDEP = BDE;
+
+    //# Get the layer containing BDEP
+    for (i = surfLayer; i > botmLayer; i--)
+        if (Lake[i].Height > BDEP) IBDEP = i;
+
+    /**************************************************************************
+     * Get centre of volume and potential energy, total mass above bdep etc   *
+     * locate surface in relation to storage table                            *
+     * ij is the last storage entry before the surface, y is the distance     *
+     * to the surface from there                                              *
+     **************************************************************************/
+    X = Lake[surfLayer].Height * ten;
+    Y = AMOD(X, one);
+    ij = (X - Y);
+    if (ij >= X) ij--;
+    if (ij > Nmorph) {
+        Y += (ij - Nmorph);
+        ij = Nmorph;
+    }
+    ij--; // offset for 0 based index
+    Y /= ten;
+
+    //# Locate BDEP in relation to storage table
+    //# ik is the last storage entry before BDEP, YB is the distance to
+    //# BDEP from there; NOTE ik could = 0
+    X = BDEP * 10.0;
+    YB = AMOD(X, one);
+    ik = (X - YB);
+    if (ik > Nmorph) {
+        YB += (ik - Nmorph);
+        ik = Nmorph;
+    }
+    ik--; // offset for 0 based index
+    YB /= 10.0;
+
+    //# Initialise the loop, il is the current layer number,
+    //# DA the area gradient
+    //# starting at IBDEP
+    //#
+    ZCV = 0.0;
+    XPE = 0.0;
+    XMASS = 0.0;
+    XVOL = 0.0;
+    il = IBDEP;
+    ix = 0;
+    if (ik < 0) {
+        DA = (MphLevelArea[0]) * 10.0;
+        AB = DA * YB;
+    } else {
+        DA = (dMphLevelArea[ik]) * 10.0;
+        AB = (MphLevelArea[ik]) + DA * YB;
+    }
+    HB = 0.0;
+
+    //# Loop
+    if (ik != Nmorph) {
+        ik++;
+        for (i = ik; i < ij; i++) {
+            ix = 1;
+            while (ix == 1) {
+                DENS = (Lake[il].Density);
+                HT = (i)/10.0 - BDEP;
+                if (i != 0) DA = (dMphLevelArea[i-1])*10.0;
+                ix = 0;
+                if (HT>=((Lake[il].Height) - BDEP)) {
+                    HT = (Lake[il].Height) - BDEP;
+                    il = il+1;
+                    ix = 1;
+                }
+                ZCVP = AB*(SQR(HT)-SQR(HB))/2.0+DA*(CUBE(HT)/3.0-HB*SQR(HT)/2.0+CUBE(HB)/6.0);
+                XVOLP = (HT-HB)*(AB+DA*(HT-HB)/2.0);
+                XMASSP = XVOLP*(1000.0+DENS);
+                ZCV = ZCV+ZCVP;
+                XPE = XPE+(1000.0+DENS)*ZCVP;
+                XMASS = XMASS+XMASSP;
+                XVOL = XVOL+XVOLP;
+                AB = DA*(HT-HB)+AB;
+                HB = HT;
+            }
+        }
+    }
+
+    //# This takes us to the last storage table entry
+    //# Now go to the surface
+    if (il == surfLayer) {
+        HT = (Lake[surfLayer].Height) - BDEP;
+        ZCVP = AB*(SQR(HT)-SQR(HB))/2.0+DA*(CUBE(HT)/3.0-HB*SQR(HT)/2.0+CUBE(HB)/6.0);
+        XVOLP = (HT-HB)*(AB+DA*(HT-HB)/2.0);
+        XMASSP = XVOLP*(1000.0+DENS);
+        ZCV = ZCV+ZCVP;
+        XPE = XPE+(1000.0+DENS)*ZCVP;
+        XMASS = XMASS+XMASSP;
+        XVOL = XVOL+XVOLP;
+    } else {
+        for (L = il; L <= surfLayer; L++) {
+           DENS = (Lake[L].Density);
+           HT = (Lake[L].Height) - BDEP;
+           ZCVP = AB*(SQR(HT)-SQR(HB))/2.0+DA*(CUBE(HT)/3.0-HB*SQR(HT)/2.0+CUBE(HB)/6.0);
+           XVOLP = (HT-HB)*(AB+DA*(HT-HB)/2.0);
+           XMASSP = XVOLP*(1000.0+DENS);
+           ZCV = ZCV+ZCVP;
+           XPE = XPE+(1000.0+DENS)*ZCVP;
+           XMASS = XMASS+XMASSP;
+           XVOL = XVOL+XVOLP;
+           AB = (Lake[L].LayerArea);
+           HB = HT;
+       }
+    }
+
+    //# Note that the units of XP are millions of kg M**2/sec**2,
+    //# units of XMAS are millions of kg
+    ZC = (ZCV/XVOL);
+    XP = ((XPE/XMASS-ZCV/XVOL)*9.810);
+    XMAS = (XMASS);
+    XPER = (XPE);
+    xVolR = (XVOL);
+
+    // set returned values
+    *_xp = XP; *_zc = ZC; *_xmas = XMAS;
+    *_xper = XPER; *_xvolr = xVolR;
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+int inner_loop(int iLevel, int level, int *pCountI, int *retI, int NSY, int *iTop,
+                                AED_REAL *yDepth, AED_REAL *yDepthM, AED_REAL *TH,
+                                AED_REAL *W, AED_REAL *B, AED_REAL *ENT, AED_REAL *yDen)
+{
+    const AED_REAL SQLAM=0.09, US=0.3E0, HPRES=10.2E0;
+    const AED_REAL R2=1000., ALP=0.083;
+    const int threeI=3;
+
+    int DIM0, DIM;
+
+    AED_REAL GRADMO;
+    AED_REAL DYDX[3], Y[3], YOUT[3];
+    AED_REAL BIGH, BIGM, Z, DZ, SMALLZ;
+    AED_REAL B0, W0, TH0;
+    AED_REAL LPP;
+    AED_REAL Q0, BU0, XM0, DQ, DRH, DW;
+    AED_REAL B2, W2, TH2, XM2, XM1, BU01, BU02;
+    AED_REAL DQDZ, DXMDZ, DBUDZ, ZZ, DW0DZ;
+    AED_REAL PA, UB, HLAY;
+    AED_REAL FLOW;
+    AED_REAL RHO0;
+
+    int i, pCount = *pCountI;
+
+    *retI = level;
+
+    LPP = bubLen/(2.0*(nPorts));
+    RHO0 = Lake[iLevel].Density;
+    PA = RHO0 * g * HPRES;
+    FLOW = aFlow/(nPorts);
+    UB = US * (1.E0 + SQLAM);
+
+//  HLAY = Lake[surfLayer].Height - BD;
+
+    /********************%%%%%%%%%%%%%%%%%%%%%%%%%%%%**********************/
+    //# Start of outer loop
+    //# Initilize parameters for plume
+    do  {
+        bDepth = yDepth[level];
+
+        DIM = 1;
+
+        //# Origin of bubbles is level; locate depth and set initial conditions
+        //# Based on series solutions McDougall
+        HLAY = yDepth[NSY] - bDepth;
+        BIGH = HLAY + HPRES;
+        BIGM = FLOW * PA * (1.E0 + SQLAM) /
+                       (4.E0 * Pi * SQR(ALP) * RHO0 * SQR(BIGH) * SQR(UB));
+
+        //#  Change initial height to 1 layer depth
+        if (level != NSY)
+            Z = yDepth[level+1]-yDepth[level];
+        else
+            Z = yDepth[level]-yDepth[level-1];
+
+        ZZ = Z/BIGH;
+        B0 = 2.E0 * ALP * Z *
+               (0.6E0 + 0.01719E0 * pow(ZZ/BIGM, 0.333E0) -
+                  0.002527E0 * pow(ZZ/BIGM, 0.667E0) +
+                  ZZ * (-0.04609E0+0.000031E0/BIGM));
+        W0 = UB * pow(BIGM/ZZ, 0.333E0) * (1.609E0 - 0.3195E0 * pow(ZZ/BIGM, 0.333E0) +
+              0.06693E0 * pow(ZZ/BIGM, 0.667E0) + ZZ * (0.4536E0 - 0.0105E0 / BIGM));
+
+        if (intopt)  //# NOTE TH0 no longer has g in it
+            TH0 = FLOW * PA * (1.E0+SQLAM)/(SQLAM*(1.-ZZ)*BIGH*Pi*RHO0*(W0+UB)*B0*B0);
+        else
+            TH0 = FLOW * PA * (1.E0+SQLAM)/(SQLAM*(1.-ZZ)*BIGH*Pi*RHO0*(W0+UB)*B0*B0*g);
+
+        //# Use 0 for initial gradient
+        DW0DZ = 0.0;
+
+        if (intopt) {
+            //# Initial check for plume interaction
+            if (B0>=LPP)
+                DIM = 2;
+            else
+                DIM = 1;
+
+            //#  **  Initial conditions for line source conditions
+            //#       however presently it is assumed to be similar to point source
+            //#       but if aerator is set up with single ports this should be ok
+            //#       because it will not go through these calculations anyhow.
+            //#       should be modified to be consistent.
+            if (DIM==2) {
+                BIGM = FLOW * PA * (1.0+lm2) / (4.0 * Pi * SQR(alp2) * RHO0 * SQR(BIGH) * CUBE(UB));
+                B0 = 2.0 * alp2 * Z * (0.6E0 + 0.01719E0 * pow(ZZ/BIGM, 0.333E0) -
+                       0.002527E0 * pow(ZZ / BIGM, 0.667E0) + ZZ * (-0.04609E0 + 0.000031E0 / BIGM));
+                W0 = ub2 * pow(BIGM/ZZ, 0.333E0) * (1.609E0 - 0.3195E0 *
+                       pow(ZZ/BIGM, 0.333E0) + 0.06693E0 * pow(ZZ/BIGM, 0.667E0) +
+                                  ZZ * (0.4536E0 - 0.0105E0 / BIGM));
+
+                //# NOTE TH0 no longer has g in it
+                TH0 = FLOW*PA*(1.0+lm2)/(lm2*(1.-ZZ)*BIGH*Pi* RHO0*(W0+UB)*B0*B0);
+
+                Q0 = B0*W0*pWidth* sqrt(Pi);
+                BU0 = RHO0*lambda*B0*TH0* sqrt(Pi)*W0*(pWidth)/sqrt(1.E0+lm2);
+                XM0 = RHO0*W0*W0*sqrt(Pi)*B0*(pWidth)/sqrt(2.E0);
+            } else {
+                //# Initial fluxes
+                Q0 = B0 * B0 * W0 * Pi;
+                BU0 = RHO0 * SQLAM * B0 * B0 * TH0 * Pi * W0 / (1.E0 + SQLAM);
+                XM0 = RHO0 * W0 * W0 * Pi * B0 * B0 / 2.E0;
+            }
+        } else {
+            //# Initial fluxes
+            Q0 = B0*B0*W0;
+            BU0 = Q0*TH0;
+            XM0 = Q0*W0;
+        }
+
+        //# Start inner loop
+        iTop[pCount] = level;
+
+        for (i = level; i <= NSY; i++) {
+            if (W0 <= 0.0) {
+                if (i == level) return FALSE;
+                break;
+            }
+
+            if (i == 1) {
+                DZ = yDepth[0];
+                DRH = (yDen[1] - yDen[0]) / (yDepthM[1] - yDepthM[0]);
+            } else {
+                DZ = yDepth[i] - yDepth[i-1];
+
+                if (i == NSY) {
+                    DRH = (yDen[NSY]-yDen[NSY-1]) / (yDepthM[NSY]-yDepthM[NSY-1]);
+                } else {
+                    DRH = (yDen[i+1]-yDen[i-1]) / (yDepthM[i+1]-yDepthM[i-1]);
+                }
+            }
+
+            SMALLZ = BIGH - (yDepth[i] - bDepth);
+            DRH = DRH / RHO0;
+
+            //#  Calculate initial derivatives
+            if (intopt) {
+                if (DIM == 2) {
+                    DQDZ = 2.0 * alp2 * pWidth * W0;
+                    DXMDZ = sqrt(Pi) * RHO0 * TH0 * lambda * B0 * pWidth;
+                    DBUDZ = RHO0 * sqrt(Pi) * B0 * pWidth * W0 * g * DRH + FLOW*PA *
+                              (DW0DZ*(1.E0-(W0 / (W0+ub2d)))+(W0/SMALLZ))/
+                              (SMALLZ*(W0+ub2d));
+                } else {
+                    DQDZ = 2.0 * ALP * B0 * W0 * Pi;
+                    DXMDZ = Pi * RHO0 * TH0 * SQLAM * B0 * B0;
+                    DBUDZ = RHO0 * Pi * B0 * B0 * W0 * g * DRH + FLOW * PA *
+                              (DW0DZ*(1.-W0/(W0+UB))+ W0/SMALLZ)/(SMALLZ*(W0+UB));
+                }
+            } else {
+                DQDZ = 2.0 * ALP * B0 * W0;
+                DXMDZ = 2.0 * g * SQLAM * B0 * B0 * TH0;
+                DBUDZ = (1.0 + SQLAM) * DRH * Q0 / SQLAM +
+                          ((1.+SQLAM)*FLOW*PA/(g*Pi*SQLAM*RHO0*SMALLZ*(W0+UB))) *
+                                             (W0/SMALLZ + (DW0DZ)*(1.-W0/(W0+UB)));
+            }
+
+            DYDX[0] = DQDZ;
+            DYDX[1] = DXMDZ;
+            DYDX[2] = DBUDZ;
+            Y[0] = Q0;
+            Y[1] = XM0;
+            Y[2] = BU0;
+
+            if (intopt) {
+                if (i != level){
+                    if (DIM==2) {
+                        W0 = sqrt(2.0)*Y[1]/(RHO0*Y[0]);
+                        TH0 = Y[2]*(sqrt(1.0+lm2))/(Y[0]*lambda*R2);
+                    } else {
+                        W0 = 2.0*Y[1]/(RHO0*Y[0]);
+                        TH0 = Y[2]*(1.0+SQLAM)/(SQLAM*Y[0]*R2);
+                    }
+                }
+            } else {
+                if (i != level){
+                    W0 = Y[1]/Y[0];
+                    TH0 = Y[2]/Y[0];
+                }
+            }
+
+            if (intopt)
+                InActRK4(Y, DYDX, threeI, DZ, YOUT, B0, SQLAM, DRH, ALP, W0, FLOW, PA, UB, SMALLZ, RHO0, TH0, DIM);
+            else
+                InDepRK4(Y, DYDX, threeI, DZ, YOUT, B0, SQLAM, DRH, ALP, W0, FLOW, PA, UB, SMALLZ, RHO0, TH0);
+
+            if (YOUT[1] <= 0.0) break;
+
+            Q0 = YOUT[0];
+            XM0 = YOUT[1];
+            BU0 = YOUT[2];
+
+            DQ = YOUT[0]-Y[0];
+
+            //# Use test for change in sign of momentum flux and also
+            //# rate of change of momentume flux.  the latter is necessary as
+            //# erroneous results will be produced if the momentum just falls
+            //# short of going negative
+            GRADMO = Y[1]/YOUT[1];
+            GRADMO = fabs(GRADMO);
+
+            if (XM0 > 0.0 && Q0 > 0.0) {
+                if (intopt) {
+                    if (DIM==2)
+                        W[i] = sqrt(2.0)*XM0/(RHO0*Q0);
+                    else
+                        W[i] = 2.0*XM0/((RHO0)*Q0);
+                } else
+                    W[i] = XM0 / Q0;
+            } else
+                break;
+
+            if (GRADMO > 1.5)
+                break;
+
+            if (W[i] > 0 && Q0 > 0.) {
+                if (intopt) {
+                    if (DIM==2)
+                        B[i] = Q0/(W[i]*pWidth*sqrt(Pi));
+                    else
+                        B[i] = sqrt(Q0/(W[i]*Pi));
+                } else
+                    B[i] = sqrt(Q0 / W[i]);
+            } else //#  Change to avoid divison by zero and sqrt(-ve)
+                B[i] = B0;
+
+            DW = W[i] - W0;
+
+            if (intopt) {
+                if (Q0 != 0.0) {
+                    if (DIM==2)
+                        TH[i] = BU0*(sqrt(1.0+lm2))/(Q0*lambda*R2);
+                    else
+                        TH[i] = BU0*(1.0+SQLAM)/(SQLAM*Q0*R2);
+                } else {
+                    if (DIM==2)
+                        TH[i] = BU0*(sqrt(1.0+lm2))/(Y[0]*lambda*R2);
+                    else
+                        TH[i] = BU0*(1.0+SQLAM)/(SQLAM*Y[0]*R2);
+                }
+
+                if (i==level)
+                    ENT[i] = Q0;
+                else
+                    ENT[i] = DQ;
+
+                DIM0 = DIM;
+
+                if (B[i]>=LPP) DIM = 2;
+
+                if (DIM0==1 && DIM==2) {
+                    B2 = (sqrt(2.0*Pi))*(SQR(B[i]))/pWidth;
+                    W2 = W[i]/sqrt(2.0);
+                    TH2 = TH[i] * SQLAM * (sqrt(1.0 + lambda * lambda))/(lambda * (SQLAM + 1.0));
+                    XM2 = W2 * W2 * sqrt(Pi) * B2 * pWidth / sqrt(2.0);
+                    XM1 = W[i] * W[i] * Pi * B[i] * B[i] / 2.0;
+                    XM0 = XM0 * XM2 / XM1;
+                    BU01 = RHO0 * SQLAM * B[i] * B[i] * TH[i] * Pi * W[i] / (1.0 + SQLAM);
+                    BU02 = RHO0 * lambda * B2 * TH2 * sqrt(Pi) * W2 * pWidth / (sqrt(1.0+lm2));
+                    BU0 = BU02 / BU01 * BU0;
+                    B[i] = B2;
+                    W[i] = W2;
+                    TH[i] = TH2;
+                }
+            } else {
+                if (Q0 != 0.0)
+                    TH[i] = BU0 / Q0;
+                else
+                    TH[i] = BU0 / Y[i];
+
+                if (i==level)
+                    ENT[i] = Pi * Q0;
+                else
+                    ENT[i] = Pi * DQ;
+            }
+
+            B0 = B[i];
+            W0 = W[i];
+            TH0 = TH[i];
+            DW0DZ = DW/DZ;
+
+        }
+
+        if ( i < NSY ) {
+            //# Here when plume has reached top
+            //# set iTop(pCount) to level before last one processed
+            //# this is because solution is inaccurate as W --> 0
+            //# height of rise of initial plume
+            iTop[pCount] = i-1;
+
+            if (pCount == 1)
+                htRise = yDepth[i-1];
+
+        } else {
+            //# Top of water column met
+            iTop[pCount] = NSY;
+            if (pCount == 1) htRise = yDepth[NSY];
+        }
+
+        //# plume has stopped at layer iTop(pCount)
+        //# total discharge is Pi*Q0, with ENT(j) from
+        //# each layer between level and iTop(pCount).
+        //# Q0 includes entrainment from iTop
+        //# NOTE that ENT(j) comes from each port; need nPorts*ENT(j) from layer j
+
+        //# Check to see if iTop(pCount) equals surfLayer (IE. top of water column)
+        //# If not set level to iTop(pCount) + 1
+        if (iTop[pCount] < NSY) {
+            level = iTop[pCount] + 1;
+            pCount++;
+            *pCountI = pCount;
+        } else
+            break;
+    } while (1);
+    /********************%%%%%%%%%%%%%%%%%%%%%%%%%%%%**********************/
+    *retI = i;
+    return TRUE;
+}
+
+
+/******************************************************************************
+ *                                                                            *
+ *                                                                            *
+ ******************************************************************************/
+void inBubble(LOGICAL intopt, int MaxNSy)
+{
+//CONSTANTS
+    const AED_REAL US=0.3E0, HPRES=10.2E0;
+
+    int level, iLevel, i, ii, j, jj, iRiver, ll, IUP;
+    int NINT, NINT0, pCount, iSkip;
+    int NSY, indexY;
+
+    AED_REAL BSL;
+    AED_REAL FLOW;
+    AED_REAL RHO0;
+    AED_REAL QVOLT, QVOL;
+
+#ifndef _VISUAL_C_
+    int iTop[MaxLayers];
+    AED_REAL T[MaxLayers], S[MaxLayers], QF[MaxLayers];
+    AED_REAL PLMDEN[MaxLayers], BFSQ[MaxLayers];
+    AED_REAL yDepth[MaxNSy], yDepthM[MaxNSy], YVOL[MaxNSy];
+    AED_REAL ENT[MaxNSy], W[MaxNSy], B[MaxNSy], TH[MaxNSy];
+    AED_REAL yTemp[MaxNSy], ySal[MaxNSy], yDen[MaxNSy];
+    AED_REAL ywqual[Num_WQ_Vars * MaxNSy];
+    AED_REAL xw[Num_WQ_Vars * MaxLayers];
+    AED_REAL wqx[Num_WQ_Vars];
+#else
+    int *iTop;
+    AED_REAL *T, *S, *QF;
+    AED_REAL *PLMDEN, *BFSQ;
+    AED_REAL *yDepth, *yDepthM, *YVOL;
+    AED_REAL *ENT, *W, *B, *TH;
+    AED_REAL *yTemp, *ySal, *yDen;
+    AED_REAL *xw, *wqx, *ywqual;
+#endif
+
+#define _ywqual(i, j) ywqual[_IDX_2d(Num_WQ_Vars, MaxNSy, i, j)]
+#define _xw(i, j)         xw[_IDX_2d(Num_WQ_Vars, MaxLayers, i, j)]
+
+    AED_REAL BD, XMom0, HL, HU, DENTOP, DENBOT;
+
+    AED_REAL tWidth;
+    LOGICAL  done;
+
+/*----------------------------------------------------------------------------*/
+
+    //# Calculated parameters and initialization
+    IUP = 0;
+    HU = 0.;
+    HL = 0.;
+
+#ifdef _VISUAL_C_
+    ALLOCATE1D_I(iTop, MaxLayers);
+
+    ALLOCATE1D_R(T, MaxLayers);      ALLOCATE1D_R(S, MaxLayers);    ALLOCATE1D_R(QF, MaxLayers);
+    ALLOCATE1D_R(PLMDEN, MaxLayers); ALLOCATE1D_R(BFSQ, MaxLayers);
+    ALLOCATE1D_R(yDepth, MaxNSy);
+    ALLOCATE1D_R(yDepthM, MaxNSy); ALLOCATE1D_R(YVOL, MaxNSy); ALLOCATE1D_R(ENT, MaxNSy);
+    ALLOCATE1D_R(W, MaxNSy);     ALLOCATE1D_R(B, MaxNSy);    ALLOCATE1D_R(TH, MaxNSy);
+    ALLOCATE1D_R(yTemp, MaxNSy); ALLOCATE1D_R(ySal, MaxNSy); ALLOCATE1D_R(yDen, MaxNSy);
+    ALLOCATE1D_R(wqx,  Num_WQ_Vars);
+
+    ALLOCATE2D(ywqual, Num_WQ_Vars, MaxNSy);
+    ALLOCATE2D(xw,     Num_WQ_Vars, MaxLayers);
+#endif
+
+    htRise = 0.;
+    cee = 0.;
+    DENTOP = 0.;
+    DENBOT = 0.;
+    lambda = 0.3;
+    alp2 = 0.102;
+    iSkip = 0;
+    if (Lake[surfLayer].Temp == Lake[botmLayer].Temp) iSkip = 1;
+    lm2 = lambda*lambda;
+    pWidth = bubLen/(nPorts);
+
+    BD = bDepth;
+    FLOW = aFlow/(nPorts);
+
+    //# Basic bubbler time step = 15 Min
+    NINT0 = noSecs;
+    NINT = 900;
+
+    //# Initialize sublayer variables
+    for (i = 0; i < MaxNSy; i++) {
+        yDepth[i] = 0.0;
+        yDepthM[i] = 0.0;
+        YVOL[i] = 0.0;
+        yTemp[i] = 0.0;
+        ySal[i] = 0.0;
+        yDen[i] = 0.0;
+    }
+
+    ub2 = US * (1.0+lm2);
+    ub2d = US * sqrt(1.0+lm2);
+
+    do  {
+        //# Find center of buoyancy; XMoment1 is 1st moment, XMom0 is 0th moment
+        //# use this to estimate two-layer equivalent structure for purposes
+        //# of calculating cee
+        if (iSkip != 1) {
+            for (i = 0; i < MaxLayers; i++) BFSQ[i] = 0.;
+
+            XMoment1 = 0.;
+            XMom0 = 0.;
+
+            for (i = 1; i <= surfLayer; i++) {
+                BFSQ[i] = gprime(Lake[i].Density, Lake[i-1].Density)/(Lake[i].MeanHeight-Lake[i-1].MeanHeight);
+                XMoment1 += Lake[i-1].Height * BFSQ[i] * (Lake[i].LayerVol + Lake[i-1].LayerVol) / 2.;
+                XMom0 +=                       BFSQ[i] * (Lake[i].LayerVol + Lake[i-1].LayerVol) / 2.;
+            }
+
+            //# Define length scales, XMoment1 is the center of buoyancy ( M above bot
+            //#                       HU is the thickness of the upper mixed layer
+            if (XMom0 != 0.) {
+                HL = XMoment1 / XMom0;
+                HU = Lake[surfLayer].Height - HL;
+            } else {
+                HL = Lake[surfLayer].Height;
+                HU = 0.;
+            }
+
+            //# Find layer containing the centre of buoyancy (layer i)
+            for (i = botmLayer; i <= surfLayer; i++)
+                if (Lake[i].Height > HL) break;
+
+            DENBOT = 0.;
+            DENTOP = 0.;
+
+            IUP = i;
+            if (IUP != surfLayer) {
+                for (i = botmLayer; i < IUP; i++)
+                    DENBOT += Lake[i].Density*Lake[i].LayerVol;
+                DENBOT = DENBOT/Lake[IUP].Vol1;
+
+                for (i = IUP; i <= surfLayer; i++)
+                    DENTOP += Lake[i].Density*Lake[i].LayerVol;
+                DENTOP = DENTOP/(Lake[surfLayer].Vol1-Lake[IUP].Vol1);
+            } else
+                cee = 0.0;
+        }
+
+        //# Set first value of level
+        iLevel = surfLayer;
+
+        for (i = surfLayer; i >= botmLayer; i--)
+            if (Lake[i].Height >= bDepth) iLevel = i;
+
+        //# Set conditions at starting level
+        RHO0 = Lake[iLevel].Density + 1000.0;
+
+        //# pCount is number of plumes
+        pCount = 1;
+        level = iLevel;
+
+        //# plume number for 2-layer approximation - assumes bubbler on bottom
+        if (IUP == surfLayer)
+            cee = 0.;
+        else {
+            if (DENBOT > DENTOP) {
+                cee = pow(((DENBOT-DENTOP)/RHO0)*HL, 1.5)*Lake[surfLayer].Height *
+                                      pow(HU/Lake[surfLayer].Height, 3.)/FLOW;
+                cee = cee * ((Lake[surfLayer].Height + HPRES) / HPRES) * RHO0 / 1000.;
+            } else
+                cee = 0.0;
+        }
+
+        //# Now get into bubbler internal substeps
+        NSY = surfLayer * nStepY;
+
+        for (i = surfLayer; i > iLevel+1; i--) {
+            for (j = 1; j <= nStepY; j++) {
+                indexY = i*nStepY-j+1;
+                yDepth[indexY] = Lake[i].Height - (Lake[i].Height - Lake[i-1].Height) *
+                                    (j-1)/(nStepY);
+                yDepthM[indexY] = Lake[i].Height - (Lake[i].Height - Lake[i-1].Height) *
+                                    ((j-1) + 0.5)/(nStepY);
+                YVOL[indexY] = Lake[i].LayerVol/(nStepY);
+                yTemp[indexY] = Lake[i].Temp;
+                ySal[indexY] = Lake[i].Salinity;
+                yDen[indexY] = Lake[i].Density;
+
+                for (ii = 0; ii < Num_WQ_Vars; ii++)
+                    _ywqual(ii, indexY) = _WQ_Vars(ii, i);
+            }
+        }
+
+        for (i = iLevel; i > 1; i--) {
+            for (j = 1; j < nStepY; j++) {
+                indexY = i*nStepY-j+1;
+                if (i != botmLayer) {
+                    yDepth[indexY] = Lake[i].Height - (Lake[i].Height - Lake[i-1].Height) *
+                                                (j-1)/(nStepY);
+                    yDepthM[indexY] = Lake[i].Height - (Lake[i].Height - Lake[i-1].Height) *
+                                                ((j-1) + 0.5)/(nStepY);
+                } else {
+                    yDepth[indexY] = Lake[i].Height-(Lake[i].Height)*
+                                             (j-1)/(nStepY);
+                    yDepthM[indexY] = Lake[i].Height-(Lake[i].Height)*
+                                             ((j-1) + 0.5)/(nStepY);
+                }
+                YVOL[indexY] = Lake[i].LayerVol/(nStepY);
+                yTemp[indexY] = Lake[i].Temp;
+                ySal[indexY] = Lake[i].Salinity;
+                yDen[indexY] = Lake[i].Density;
+
+                for (ii = 0; ii < Num_WQ_Vars; ii++)
+                    _ywqual(ii, indexY) = _WQ_Vars(ii, i);
+            }
+        }
+
+        level = level * nStepY;
+
+        for (i = 0; i < MaxNSy; i++) {
+            ENT[i] = 0.0;
+            W[i] = 0.0;
+            B[i] = 0.0;
+            TH[i] = 0.0;
+        }
+
+        done = FALSE;
+        do  {
+            if ( !done && inner_loop(iLevel, level, &pCount, &i, NSY, iTop, yDepth, yDepthM, TH, W, B, ENT, yDen) ) {
+                //# Multiply ENT(j) by the number of ports
+                for (j = 0; j < NSY; j++)
+                    ENT[j] = (nPorts) * ENT[j];
+
+                //# Check if new time step required
+                if (NINT0 < NINT) NINT = NINT0;
+
+                //# Fix entrainments
+                for (i = 0; i < NSY; i++) {
+                    ENT[i] *= (NINT)/1000.0;
+                    YVOL[i] -= ENT[i];
+
+                    if (YVOL[i] <= 0.0) {
+                        YVOL[i] += ENT[i];
+                        if (i != NSY-1)
+                            ENT[i+1] += (ENT[i] - 0.9*YVOL[i])*1000./(NINT);
+
+                        ENT[i] = 0.9 * YVOL[i];
+                        YVOL[i] -= ENT[i];
+                    }
+                }
+
+                //# Fix properties of plume
+                //# -incoming
+                i = 1;
+                level = 1;
+                done = TRUE;
+            }
+
+            if ( done ) {
+                T[i] = 0.0;
+                S[i] = 0.0;
+                PLMDEN[i] = 0.0;
+
+                for (ii = 0; ii < Num_WQ_Vars; ii++) _xw(ii, i) = 0.0;
+
+                //# -entrainment
+                QF[i] = 0.0;
+
+                for (j = level; j < iTop[i]; j++) {
+                    if (ENT[j] > 0.0) {
+                        T[i] = combine(T[i], QF[i], PLMDEN[i], yTemp[j], ENT[j], yDen[j]);
+                        S[i] = combine(S[i], QF[i], PLMDEN[i],  ySal[j], ENT[j], yDen[j]);
+                        PLMDEN[i] = calculate_density(T[i], S[i]);
+
+                        for (ii = 0; ii < Num_WQ_Vars; ii++)
+                            _xw(ii, i) = combine_vol(_xw(ii, i), QF[i], _ywqual(ii, j), ENT[j]);
+
+                        QF[i] += ENT[j];
+                    }
+                }
+                done = FALSE;
+            }
+
+            //# Check for next plume
+            //# Restart at layer iTop+1 and go to top of next plume
+            if (i < pCount) {
+                level = iTop[i] + 1;
+                i++;
+                done = TRUE;
+            }
+        } while (done);
+
+        //# Now swap back to the regular layer size
+        //# Volume is only physical property we need change
+        for (ii = botmLayer; ii <= surfLayer; ii++) {
+            Lake[ii].LayerVol = 0.;
+            for (jj = 0; jj < nStepY; jj++)
+                Lake[ii].LayerVol += YVOL[ii*nStepY-jj+1];
+
+            Lake[ii].Temp = yTemp[ii*nStepY];
+            Lake[ii].Salinity = ySal[ii*nStepY];
+            Lake[ii].Density =yDen[ii*nStepY];
+
+            for (jj = 0; jj < Num_WQ_Vars; jj++)
+                _WQ_Vars(jj, ii) = _ywqual(jj, ii*nStepY);
+        }
+
+        //# Find the level of intrusion of the water when it falls back
+        //# and insert it using the routine from the DoInFlow routine.
+        //# assume the basin length at the bubbler is determined by the slope of
+        //# the major DoInFlow valley, I.E river 1.
+        iRiver = 0;
+        BSL = Inflows[iRiver].Phi * Pi / 180.0;
+
+        //# Make insertion WIDTH 0, then insert will use reservoir width at discha
+        QVOLT = 0.0;
+
+        for (i = 0; i < pCount; i++) {
+            for (jj = 0; jj < Num_WQ_Vars; jj++) wqx[jj] = _xw(jj, i);
+
+            QVOLT = QVOLT+QF[i];
+            QVOL = QF[i];
+
+            tWidth = 1.E-8;
+            insert(QVOL, PLMDEN[i], BSL, T[i], S[i], wqx, NINT, &tWidth, &ll);
+        }
+
+        //# Fix depths with resint
+        resize_internals(2, 1);
+
+        //# Fix layers
+        check_layer_thickness();
+
+        //# Reinitialize bubbler depth to original (needed by pe3)
+        bDepth = BD;
+
+        //# Check if number of seconds left
+        NINT0 = NINT0 - NINT;
+        if (NINT0 > 0)
+            iSkip = 1;
+        else
+            break;
+    } while (1);//# Finished!
+
+#ifdef _VISUAL_C_
+    free(iTop);
+    free(T);       free(S);      free(QF);
+    free(PLMDEN);  free(BFSQ);   free(yDepth);
+    free(yDepthM); free(YVOL);   free(ENT);
+    free(W);       free(B);      free(TH);
+    free(yTemp);   free(ySal);   free(yDen);
+    free(wqx);     free(ywqual); free(xw);
+#endif
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
+void InActRK4(AED_REAL *Y, AED_REAL *DYDX, int N, AED_REAL H,
+              AED_REAL *YOUT, AED_REAL B0, AED_REAL SQLAM, AED_REAL DRH,
+              AED_REAL ALP, AED_REAL W0, AED_REAL FLOW, AED_REAL PA,
+              AED_REAL UB, AED_REAL SMALLZ,
+              AED_REAL RHO0, AED_REAL TH0, int DIM)
+{
+    AED_REAL YT[3], DYT[3], DYM[3], HH, H6;
+    int i;
+
+/*----------------------------------------------------------------------------*/
+
+    HH = H*0.5;
+    H6 = H/6;
+
+    for (i = 0; i < N; i++)
+        YT[i] = Y[i] + HH * DYDX[i];
+
+    if (YT[1] <= 0.0) {
+        YOUT[0] = YT[0];
+        YOUT[1] = YT[1];
+        YOUT[2] = YT[2];
+        return;
+    }
+
+    InActDrv(HH, YT, DYT, B0, SQLAM, DRH, ALP, W0, FLOW, PA, UB, SMALLZ, RHO0, TH0, DIM);
+
+    for (i = 0; i < N; i++)
+        YT[i] = Y[i] + HH * DYT[i];
+
+    if (YT[1] <= 0.0) {
+        YOUT[0] = YT[0];
+        YOUT[1] = YT[1];
+        YOUT[2] = YT[2];
+        return;
+    }
+
+    InActDrv(HH, YT, DYM, B0, SQLAM, DRH, ALP, W0, FLOW, PA, UB, SMALLZ, RHO0, TH0, DIM);
+
+    for (i = 0; i < N; i++) {
+        YT[i] = Y[i] + H * DYM[i];
+        DYM[i] = DYT[i] + DYM[i];
+    }
+    if (YT[1] <= 0.0) {
+        YOUT[0] = YT[0];
+        YOUT[1] = YT[1];
+        YOUT[2] = YT[2];
+        return;
+    }
+
+    InActDrv(HH, YT, DYT, B0, SQLAM, DRH, ALP, W0, FLOW, PA, UB, SMALLZ, RHO0, TH0, DIM);
+
+    for (i = 0; i < N; i++)
+        YOUT[i] = Y[i] + H6*(DYDX[i] + DYT[i] + 2.*DYM[i]);
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
+void InActDrv(AED_REAL X, AED_REAL *Y, AED_REAL *DYDX, AED_REAL B0,
+              AED_REAL SQLAM, AED_REAL DRH, AED_REAL ALP, AED_REAL W0,
+              AED_REAL FLOW, AED_REAL PA, AED_REAL UB, AED_REAL SMALLZ,
+              AED_REAL RHO0, AED_REAL TH0, int DIM)
+{
+//CONSTANTS
+    const AED_REAL R2 = 1000.;
+
+//LOCALS
+    AED_REAL W, B, TH;
+
+/*----------------------------------------------------------------------------*/
+
+    if (fabs(Y[0]) <= 1.E-7) {
+        W = W0;
+        TH = TH0;
+    } else {
+        if (DIM==2) {
+            W = (sqrt(2.0)) * Y[1] / (RHO0 * Y[0]);
+            TH = Y[2] * (sqrt(1.0+lm2)) / (Y[0] * lambda * R2);
+        } else {
+            W = 2.0 * Y[1] / (RHO0*Y[0]);
+            TH = Y[2] * (1.0 + SQLAM) / (SQLAM * Y[0] * R2);
+        }
+    }
+
+    if (W > 0. && Y[0] > 0.) {
+        if (DIM==2)
+            B = Y[0] / (W * pWidth * sqrt(Pi));
+        else
+            B = sqrt(Y[0] / (W * Pi));
+    } else
+        B = B0;
+
+    if (DIM==2) {
+        DYDX[0] = 2.0 * alp2 * pWidth * W;
+        DYDX[1] = sqrt(Pi) * RHO0 * TH * lambda * B * pWidth;
+        DYDX[2] = sqrt(Pi) * B * pWidth * W * g * DRH * RHO0 +
+                  FLOW * PA * (((W-W0)/X) * (1. - W/(W + ub2d)) + W/SMALLZ) /
+                  (SMALLZ * (W+ub2d));
+    } else {
+        DYDX[0] = 2.0 * ALP * B * W * Pi;
+        DYDX[1] = Pi * RHO0 * TH * SQLAM * B * B;
+        DYDX[2] = Pi * B * B * W * g * DRH * RHO0 +
+                  FLOW * PA * (((W-W0)/X) * (1. - W/(W + UB)) + W/SMALLZ) /
+                  (SMALLZ * (W+UB));
+    }
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
+void InDepRK4(AED_REAL *Y, AED_REAL *DYDX, int N, AED_REAL H,
+              AED_REAL *YOUT, AED_REAL B0, AED_REAL SQLAM, AED_REAL DRH,
+              AED_REAL ALP, AED_REAL W0, AED_REAL FLOW, AED_REAL PA,
+              AED_REAL UB, AED_REAL SMALLZ,
+              AED_REAL RHO0, AED_REAL TH0)
+{
+    AED_REAL YT[3], DYT[3], DYM[3], HH, H6;
+
+    int i;
+
+/*----------------------------------------------------------------------------*/
+
+    HH = H/2;
+    H6 = H/6;
+
+    for (i = 0; i < N; i++)
+        YT[i] = Y[i] + HH * DYDX[i];
+
+    if (YT[1] <= 0.0) {
+        YOUT[0] = YT[0];
+        YOUT[1] = YT[1];
+        YOUT[2] = YT[2];
+        return;
+    }
+
+    InDepDrv(HH, YT, DYT, B0, SQLAM, DRH, ALP, W0, FLOW, PA, UB, SMALLZ, RHO0, TH0);
+
+    for (i = 0; i < N; i++)
+        YT[i] = Y[i] + HH*DYT[i];
+
+    if (YT[1] <= 0.0) {
+        YOUT[0] = YT[0];
+        YOUT[1] = YT[1];
+        YOUT[2] = YT[2];
+        return;
+    }
+
+    InDepDrv(HH, YT, DYM, B0, SQLAM, DRH, ALP, W0, FLOW, PA, UB, SMALLZ, RHO0, TH0);
+
+    for (i = 0; i < N; i++) {
+        YT[i] = Y[i] + H*DYM[i];
+        DYM[i] = DYT[i] + DYM[i];
+    }
+    if (YT[1] <= 0.0) {
+        YOUT[0] = YT[0];
+        YOUT[1] = YT[1];
+        YOUT[2] = YT[2];
+        return;
+    }
+
+    InDepDrv(H, YT, DYT, B0, SQLAM, DRH, ALP, W0, FLOW, PA, UB, SMALLZ, RHO0, TH0);
+
+    for (i = 0; i < N; i++)
+        YOUT[i] = Y[i] + H6*(DYDX[i] + DYT[i] + 2.*DYM[i]);
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
+void InDepDrv(AED_REAL X, AED_REAL *Y, AED_REAL *DYDX, AED_REAL B0,
+              AED_REAL SQLAM, AED_REAL DRH, AED_REAL ALP, AED_REAL W0,
+              AED_REAL FLOW, AED_REAL PA, AED_REAL UB, AED_REAL SMALLZ,
+              AED_REAL RHO0, AED_REAL TH0)
+{
+    AED_REAL W, B, TH;
+
+/*----------------------------------------------------------------------------*/
+
+    if (fabs(Y[0]) <= 1.E-7) {
+        W = W0;
+        TH = TH0;
+    } else {
+        W = Y[1]/Y[0];
+        TH = Y[2]/Y[0];
+    }
+
+    if (W > 0. && Y[0] > 0.)
+        B = sqrt(Y[0] / W);
+    else
+        B = B0;
+
+    DYDX[0] = 2.*ALP*B*W;
+    DYDX[1] = 2.*9.81*SQLAM*SQR(B)*TH;
+    DYDX[2] = (1.+SQLAM)*DRH*Y[0]/SQLAM
+             +((1.+SQLAM)*FLOW*PA/(g*Pi*SQLAM*RHO0*SMALLZ*(W+UB)))*(W/SMALLZ +
+                                                      ((W-W0)/X)*(1.-W/(W+UB)));
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
diff -NaBur -x .git GLM-orig/src/glm_bubbler.h GLM/src/glm_bubbler.h
--- GLM-orig/src/glm_bubbler.h	1970-01-01 08:00:00.000000000 +0800
+++ GLM/src/glm_bubbler.h	2019-08-01 09:11:42.431092540 +0800
@@ -0,0 +1,43 @@
+/******************************************************************************
+ *                                                                            *
+ *  glm_bubbler.h                                                             *
+ *                                                                            *
+ * Developed by :                                                             *
+ *     AquaticEcoDynamics (AED) Group                                         *
+ *     School of Agriculture and Environment                                  *
+ *     The University of Western Australia                                    *
+ *                                                                            *
+ *     http://aquatic.science.uwa.edu.au/                                     *
+ *                                                                            *
+ * Copyright 2018 -  The University of Western Australia                      *
+ *                                                                            *
+ *  This file is part of GLM (General Lake Model)                             *
+ *                                                                            *
+ *  GLM is free software: you can redistribute it and/or modify               *
+ *  it under the terms of the GNU General Public License as published by      *
+ *  the Free Software Foundation, either version 3 of the License, or         *
+ *  (at your option) any later version.                                       *
+ *                                                                            *
+ *  GLM is distributed in the hope that it will be useful,                    *
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of            *
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
+ *  GNU General Public License for more details.                              *
+ *                                                                            *
+ *  You should have received a copy of the GNU General Public License         *
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.     *
+ *                                                                            *
+ ******************************************************************************/
+#ifndef _GLM_BUBBLER_H_
+#define _GLM_BUBBLER_H_
+
+void init_bubbler(void);
+void do_bubbler(int jday, int iclock);
+void read_bubbler(int jday);
+void write_bubbler(int jday);
+void print_bubbler(void);
+void done_bubbler(void);
+
+
+extern LOGICAL     bubbler_on;
+
+#endif
diff -NaBur -x .git GLM-orig/src/glm_init.c GLM/src/glm_init.c
--- GLM-orig/src/glm_init.c	2018-12-06 10:45:44.404431918 +0800
+++ GLM/src/glm_init.c	2019-08-01 09:11:42.435092633 +0800
@@ -275,6 +275,25 @@
   //extern AED_REAL          sed_temp_peak_doy;
     /*-------------------------------------------*/
 
+    /*---------------------------------------------
+     * bubbler
+     *-------------------------------------------*/
+    extern LOGICAL         bubbler_on;
+    extern char           *bubbler_data_file;
+    extern AED_REAL        bubbler_aflow;
+    extern int             bubbler_nports;
+    extern AED_REAL        bubbler_bublen;
+    extern AED_REAL        bubbler_bdepth;
+    extern LOGICAL         bubbler_opopt;
+    extern AED_REAL        bubbler_ton;
+    extern AED_REAL        bubbler_toff;
+    extern LOGICAL         bubbler_intopt;
+    extern char           *bubbler_start;
+    extern char           *bubbler_stop;
+    extern LOGICAL         bubbler_eff;
+    extern char           *bubbler_eff_file;
+    /*-------------------------------------------*/
+
     int i, j, k;
     int namlst;
 
@@ -478,6 +497,24 @@
           { "sed_temp_depth",    TYPE_DOUBLE,           &sed_temp_depth    },
           { NULL,                TYPE_END,              NULL               }
     };
+    NAMELIST bubbler[] = {
+          { "bubbler",           TYPE_START,            NULL               },
+          { "on",                TYPE_BOOL,             &bubbler_on        },
+          { "data_file",         TYPE_STR,              &bubbler_data_file },
+          { "aflow",             TYPE_DOUBLE,           &bubbler_aflow     },
+          { "nports",            TYPE_INT,              &bubbler_nports    },
+          { "bublen",            TYPE_DOUBLE,           &bubbler_bublen    },
+          { "bdepth",            TYPE_DOUBLE,           &bubbler_bdepth    },
+          { "opopt",             TYPE_BOOL,             &bubbler_opopt     },
+          { "ton",               TYPE_DOUBLE,           &bubbler_ton       },
+          { "toff",              TYPE_DOUBLE,           &bubbler_toff      },
+          { "intopt",            TYPE_BOOL,             &bubbler_intopt    },
+          { "start",             TYPE_STR,              &bubbler_start     },
+          { "stop",              TYPE_STR,              &bubbler_stop      },
+          { "eff",               TYPE_BOOL,             &bubbler_eff       },
+          { "eff_file",          TYPE_STR,              &bubbler_eff_file  },
+          { NULL,                TYPE_END,              NULL               }
+    };
     NAMELIST debugging[] = {
           { "debugging",         TYPE_START,            NULL               },
           { "debug_mixer",       TYPE_BOOL,             &dbg_mix           },
@@ -997,6 +1034,14 @@
     }
 
 
+
+    // -- bubbler
+
+    if ( get_namelist(namlst, bubbler) )
+        bubbler_on = FALSE;
+    if ( bubbler_on && (bubbler_data_file != NULL) )
+         open_bubbler_file(bubbler_data_file, NULL);
+
     get_namelist(namlst, debugging);
 
     close_namelist(namlst);  // Close the glm.nml file
diff -NaBur -x .git GLM-orig/src/glm_input.c GLM/src/glm_input.c
--- GLM-orig/src/glm_input.c	2019-07-31 12:55:21.846572907 +0800
+++ GLM/src/glm_input.c	2019-08-01 09:11:42.435092633 +0800
@@ -67,9 +67,18 @@
     int wtemp_idx;
 } WithdrawalTempDataT;
 
+typedef struct _bubl_data_ {
+    int bubf;
+    int flow_idx;
+    int port_idx;
+    int depth_idx;
+    int length_idx;
+} BubbleDataT;
+
 static InflowDataT inf[MaxInf];
 static OutflowDataT outf[MaxOut];
 static WithdrawalTempDataT withdrTempf = { -1, -1 };
+static BubbleDataT bubl;
 
 static int metf = -1, kwf = -1;
 static int rain_idx = -1, hum_idx  = -1, lwav_idx = -1, sw_idx   = -1,
@@ -357,6 +366,25 @@
 /******************************************************************************
  *                                                                            *
  ******************************************************************************/
+void read_bubble_data(int julian, AED_REAL *aFlow, int *nPorts,
+                                            AED_REAL *bDepth, AED_REAL *bLength)
+{
+    int csv;
+
+    csv = bubl.bubf;
+    find_day(csv, time_idx, julian);
+
+    *aFlow   = get_csv_val_r(csv, bubl.flow_idx);
+    *nPorts  = get_csv_val_i(csv, bubl.port_idx);
+    *bDepth  = get_csv_val_r(csv, bubl.depth_idx);
+    *bLength = get_csv_val_r(csv, bubl.length_idx);
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
 static void locate_time_column(int csv, const char *which, const char *fname)
 {
     int lt_idx = -1;
@@ -535,6 +563,26 @@
 }
 /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
 
+
+/******************************************************************************
+ *                                                                            *
+ ******************************************************************************/
+void open_bubbler_file(const char *fname, const char *timefmt)
+{
+    if ( (bubl.bubf = open_csv_input(fname, timefmt)) < 0 ) {
+        fprintf(stderr, "Failed to open '%s'\n", fname);
+        exit(1) ;
+    }
+
+//  locate_time_column(bubl.bubf, "bubbler", fname);
+
+    bubl.flow_idx = find_csv_var(bubl.bubf, "aFlow");
+    bubl.port_idx = find_csv_var(bubl.bubf, "nPorts");
+    bubl.depth_idx = find_csv_var(bubl.bubf, "bDepth");
+    bubl.length_idx = find_csv_var(bubl.bubf, "bLength");
+}
+/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
+
 
 /******************************************************************************
  *                                                                            *
diff -NaBur -x .git GLM-orig/src/glm_input.h GLM/src/glm_input.h
--- GLM-orig/src/glm_input.h	2018-11-29 19:22:05.681473576 +0800
+++ GLM/src/glm_input.h	2019-08-01 09:13:04.797021303 +0800
@@ -57,6 +57,10 @@
 void close_outflow_files(void);
 void close_withdrtemp_files(void);
 
+void open_bubbler_file(const char *fname, const char *timefmt);
+void read_bubble_data(int julian, AED_REAL *aFlow, int *nPorts,
+                                           AED_REAL *bDepth, AED_REAL *bLength);
+
 extern int lw_ind;
 
 /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
diff -NaBur -x .git GLM-orig/src/glm_model.c GLM/src/glm_model.c
--- GLM-orig/src/glm_model.c	2019-03-26 10:34:32.187289700 +0800
+++ GLM/src/glm_model.c	2019-08-01 09:13:55.106179511 +0800
@@ -64,6 +64,7 @@
 #include <libplot.h>
 #include "glm_plot.h"
 #endif
+#include "glm_bubbler.h"
 
 #include "aed_time.h"
 #include "aed_csv.h"
@@ -161,6 +162,8 @@
     plotstep = 0;
 #endif
 
+    if ( bubbler_on ) init_bubbler();
+
     //# Create the output files.
     init_output(*jstart, out_dir, out_fn, MaxLayers, Longitude, Latitude);
 
@@ -636,6 +639,8 @@
     int iclock;  //# The seconds counter during a day
     AED_REAL Light_Surface; //# Light at the surface of the lake after do_surface
 
+    if ( bubbler_on ) read_bubbler(jday);
+
     noSecs = timestep;
     coef_wind_drag = CD;
 
@@ -737,6 +742,8 @@
         //#If sub-daily re-set SWold
         if ( subdaily ) SWold = SWnew;
 
+        if ( bubbler_on ) do_bubbler(jday, iclock);
+
         iclock += noSecs;
     }   //# do while (iclock < iSecsPerDay)
     /**************************************************************************
@@ -747,6 +754,8 @@
     plotstep = 0;
 #endif
 
+    if ( bubbler_on ) write_bubbler(jday);
+
     return stepnum;
 }
 /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
@@ -759,6 +768,8 @@
 {
     fputc('\n', stdout);
 
+    if ( bubbler_on ) print_bubbler();
+
     close_kw_files();
     close_met_files();
     close_inflow_files();
@@ -767,6 +778,8 @@
 
     if (wq_calc) wq_clean_glm();    //# deallocataes wq stuff
 
+    if ( bubbler_on ) done_bubbler();
+
     close_output();
 }
 /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
diff -NaBur -x .git GLM-orig/win/vs-glm/glm+.vcxproj GLM/win/vs-glm/glm+.vcxproj
--- GLM-orig/win/vs-glm/glm+.vcxproj	2018-11-29 19:22:05.689473746 +0800
+++ GLM/win/vs-glm/glm+.vcxproj	2019-08-01 09:17:21.174884782 +0800
@@ -123,6 +123,7 @@
   </ItemDefinitionGroup>
   <ItemGroup>
     <ClCompile Include="..\..\src\glm_bird.c" />
+    <ClCompile Include="..\..\src\glm_bubbler.c" />
     <ClCompile Include="..\..\src\glm_const.c" />
     <ClCompile Include="..\..\src\glm_csv.c" />
     <ClCompile Include="..\..\src\glm_debug.c" />
@@ -149,6 +150,7 @@
   <ItemGroup>
     <ClInclude Include="..\..\src\glm.h" />
     <ClInclude Include="..\..\src\glm_bird.h" />
+    <ClInclude Include="..\..\src\glm_bubbler.h" />
     <ClInclude Include="..\..\src\glm_const.h" />
     <ClInclude Include="..\..\src\glm_csv.h" />
     <ClInclude Include="..\..\src\glm_debug.h" />
diff -NaBur -x .git GLM-orig/win/vs-glm/glm+.vcxproj.filters GLM/win/vs-glm/glm+.vcxproj.filters
--- GLM-orig/win/vs-glm/glm+.vcxproj.filters	2018-11-29 19:22:05.689473746 +0800
+++ GLM/win/vs-glm/glm+.vcxproj.filters	2019-08-01 09:17:52.731604967 +0800
@@ -17,6 +17,9 @@
     <ClCompile Include="..\..\src\glm_bird.c">
       <Filter>Source Files</Filter>
     </ClCompile>
+    <ClCompile Include="..\..\src\glm_bubbler.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
     <ClCompile Include="..\..\src\glm_const.c">
       <Filter>Source Files</Filter>
     </ClCompile>
@@ -91,6 +94,9 @@
     <ClInclude Include="..\..\src\glm_bird.h">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="..\..\src\glm_bubbler.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="..\..\src\libplot.h">
       <Filter>Header Files</Filter>
     </ClInclude>
diff -NaBur -x .git GLM-orig/win/vs-glm/glm.vcxproj GLM/win/vs-glm/glm.vcxproj
--- GLM-orig/win/vs-glm/glm.vcxproj	2018-11-29 19:22:05.689473746 +0800
+++ GLM/win/vs-glm/glm.vcxproj	2019-08-01 09:16:12.793323882 +0800
@@ -118,6 +118,7 @@
   </ItemDefinitionGroup>
   <ItemGroup>
     <ClCompile Include="..\..\src\glm_bird.c" />
+    <ClCompile Include="..\..\src\glm_bubbler.c" />
     <ClCompile Include="..\..\src\glm_const.c" />
     <ClCompile Include="..\..\src\glm_csv.c" />
     <ClCompile Include="..\..\src\glm_debug.c" />
@@ -144,6 +145,7 @@
   <ItemGroup>
     <ClInclude Include="..\..\src\glm.h" />
     <ClInclude Include="..\..\src\glm_bird.h" />
+    <ClInclude Include="..\..\src\glm_bubbler.h" />
     <ClInclude Include="..\..\src\glm_const.h" />
     <ClInclude Include="..\..\src\glm_csv.h" />
     <ClInclude Include="..\..\src\glm_debug.h" />
diff -NaBur -x .git GLM-orig/win/vs-glm/glm.vcxproj.filters GLM/win/vs-glm/glm.vcxproj.filters
--- GLM-orig/win/vs-glm/glm.vcxproj.filters	2018-11-29 19:22:05.689473746 +0800
+++ GLM/win/vs-glm/glm.vcxproj.filters	2019-08-01 09:16:49.230155656 +0800
@@ -17,6 +17,9 @@
     <ClCompile Include="..\..\src\glm_bird.c">
       <Filter>Source Files</Filter>
     </ClCompile>
+    <ClCompile Include="..\..\src\glm_bubbler.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
     <ClCompile Include="..\..\src\glm_const.c">
       <Filter>Source Files</Filter>
     </ClCompile>
@@ -91,6 +94,9 @@
     <ClInclude Include="..\..\src\glm_bird.h">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="..\..\src\glm_bubbler.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="..\..\src\libplot.h">
       <Filter>Header Files</Filter>
     </ClInclude>
diff -NaBur -x .git GLM-orig/win/vs-glm-no-fabm/glm+.vcxproj GLM/win/vs-glm-no-fabm/glm+.vcxproj
--- GLM-orig/win/vs-glm-no-fabm/glm+.vcxproj	2018-11-29 19:22:05.685473660 +0800
+++ GLM/win/vs-glm-no-fabm/glm+.vcxproj	2019-08-01 09:19:29.841784856 +0800
@@ -123,6 +123,7 @@
   </ItemDefinitionGroup>
   <ItemGroup>
     <ClCompile Include="..\..\src\glm_bird.c" />
+    <ClCompile Include="..\..\src\glm_bubbler.c" />
     <ClCompile Include="..\..\src\glm_const.c" />
     <ClCompile Include="..\..\src\glm_csv.c" />
     <ClCompile Include="..\..\src\glm_debug.c" />
@@ -149,6 +150,7 @@
   <ItemGroup>
     <ClInclude Include="..\..\src\glm.h" />
     <ClInclude Include="..\..\src\glm_bird.h" />
+    <ClInclude Include="..\..\src\glm_bubbler.h" />
     <ClInclude Include="..\..\src\glm_const.h" />
     <ClInclude Include="..\..\src\glm_csv.h" />
     <ClInclude Include="..\..\src\glm_debug.h" />
diff -NaBur -x .git GLM-orig/win/vs-glm-no-fabm/glm+.vcxproj.filters GLM/win/vs-glm-no-fabm/glm+.vcxproj.filters
--- GLM-orig/win/vs-glm-no-fabm/glm+.vcxproj.filters	2018-11-29 19:22:05.685473660 +0800
+++ GLM/win/vs-glm-no-fabm/glm+.vcxproj.filters	2019-08-01 09:19:57.634405247 +0800
@@ -17,6 +17,9 @@
     <ClCompile Include="..\..\src\glm_bird.c">
       <Filter>Source Files</Filter>
     </ClCompile>
+    <ClCompile Include="..\..\src\glm_bubbler.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
     <ClCompile Include="..\..\src\glm_const.c">
       <Filter>Source Files</Filter>
     </ClCompile>
@@ -91,6 +94,9 @@
     <ClInclude Include="..\..\src\glm_bird.h">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="..\..\src\glm_bubbler.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="..\..\src\libplot.h">
       <Filter>Header Files</Filter>
     </ClInclude>
diff -NaBur -x .git GLM-orig/win/vs-glm-no-fabm/glm.vcxproj GLM/win/vs-glm-no-fabm/glm.vcxproj
--- GLM-orig/win/vs-glm-no-fabm/glm.vcxproj	2018-11-29 19:22:05.685473660 +0800
+++ GLM/win/vs-glm-no-fabm/glm.vcxproj	2019-08-01 09:20:25.679031913 +0800
@@ -118,6 +118,7 @@
   </ItemDefinitionGroup>
   <ItemGroup>
     <ClCompile Include="..\..\src\glm_bird.c" />
+    <ClCompile Include="..\..\src\glm_bubbler.c" />
     <ClCompile Include="..\..\src\glm_const.c" />
     <ClCompile Include="..\..\src\glm_csv.c" />
     <ClCompile Include="..\..\src\glm_debug.c" />
@@ -144,6 +145,7 @@
   <ItemGroup>
     <ClInclude Include="..\..\src\glm.h" />
     <ClInclude Include="..\..\src\glm_bird.h" />
+    <ClInclude Include="..\..\src\glm_bubbler.h" />
     <ClInclude Include="..\..\src\glm_const.h" />
     <ClInclude Include="..\..\src\glm_csv.h" />
     <ClInclude Include="..\..\src\glm_debug.h" />
diff -NaBur -x .git GLM-orig/win/vs-glm-no-fabm/glm.vcxproj.filters GLM/win/vs-glm-no-fabm/glm.vcxproj.filters
--- GLM-orig/win/vs-glm-no-fabm/glm.vcxproj.filters	2018-11-29 19:22:05.685473660 +0800
+++ GLM/win/vs-glm-no-fabm/glm.vcxproj.filters	2019-08-01 09:20:53.799660906 +0800
@@ -17,6 +17,9 @@
     <ClCompile Include="..\..\src\glm_bird.c">
       <Filter>Source Files</Filter>
     </ClCompile>
+    <ClCompile Include="..\..\src\glm_bubbler.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
     <ClCompile Include="..\..\src\glm_const.c">
       <Filter>Source Files</Filter>
     </ClCompile>
@@ -91,6 +94,9 @@
     <ClInclude Include="..\..\src\glm_bird.h">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="..\..\src\glm_bubbler.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="..\..\src\libplot.h">
       <Filter>Header Files</Filter>
     </ClInclude>
diff -NaBur -x .git GLM-orig/win/vs-glm-wq-dll/glm.vcxproj GLM/win/vs-glm-wq-dll/glm.vcxproj
--- GLM-orig/win/vs-glm-wq-dll/glm.vcxproj	2018-11-29 19:22:05.685473660 +0800
+++ GLM/win/vs-glm-wq-dll/glm.vcxproj	2019-08-01 09:21:17.140183425 +0800
@@ -119,6 +119,7 @@
   </ItemDefinitionGroup>
   <ItemGroup>
     <ClCompile Include="..\..\src\glm_bird.c" />
+    <ClCompile Include="..\..\src\glm_bubbler.c" />
     <ClCompile Include="..\..\src\glm_const.c" />
     <ClCompile Include="..\..\src\glm_csv.c" />
     <ClCompile Include="..\..\src\glm_debug.c" />
@@ -146,6 +147,7 @@
   <ItemGroup>
     <ClInclude Include="..\..\src\glm.h" />
     <ClInclude Include="..\..\src\glm_bird.h" />
+    <ClInclude Include="..\..\src\glm_bubbler.h" />
     <ClInclude Include="..\..\src\glm_const.h" />
     <ClInclude Include="..\..\src\glm_csv.h" />
     <ClInclude Include="..\..\src\glm_debug.h" />
diff -NaBur -x .git GLM-orig/win/vs-glm-wq-dll/glm.vcxproj.filters GLM/win/vs-glm-wq-dll/glm.vcxproj.filters
--- GLM-orig/win/vs-glm-wq-dll/glm.vcxproj.filters	2018-11-29 19:22:05.685473660 +0800
+++ GLM/win/vs-glm-wq-dll/glm.vcxproj.filters	2019-08-01 09:21:41.692733498 +0800
@@ -17,6 +17,9 @@
     <ClCompile Include="..\..\src\glm_bird.c">
       <Filter>Source Files</Filter>
     </ClCompile>
+    <ClCompile Include="..\..\src\glm_bubbler.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
     <ClCompile Include="..\..\src\glm_csv.c">
       <Filter>Source Files</Filter>
     </ClCompile>
@@ -95,6 +98,9 @@
     <ClInclude Include="..\..\src\glm_bird.h">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="..\..\src\glm_bubbler.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="..\..\src\glm_csv.h">
       <Filter>Header Files</Filter>
     </ClInclude>
diff -NaBur -x .git GLM-orig/win/vs-libglm/libglm+.vcxproj GLM/win/vs-libglm/libglm+.vcxproj
--- GLM-orig/win/vs-libglm/libglm+.vcxproj	2018-11-29 19:22:05.689473746 +0800
+++ GLM/win/vs-libglm/libglm+.vcxproj	2019-08-01 09:22:13.821453922 +0800
@@ -125,6 +125,7 @@
   </ItemDefinitionGroup>
   <ItemGroup>
     <ClCompile Include="..\..\src\glm_bird.c" />
+    <ClCompile Include="..\..\src\glm_bubbler.c" />
     <ClCompile Include="..\..\src\glm_const.c" />
     <ClCompile Include="..\..\src\glm_csv.c" />
     <ClCompile Include="..\..\src\glm_debug.c" />
@@ -150,6 +151,7 @@
   <ItemGroup>
     <ClInclude Include="..\..\src\glm.h" />
     <ClInclude Include="..\..\src\glm_bird.h" />
+    <ClInclude Include="..\..\src\glm_bubbler.h" />
     <ClInclude Include="..\..\src\glm_const.h" />
     <ClInclude Include="..\..\src\glm_csv.h" />
     <ClInclude Include="..\..\src\glm_debug.h" />
diff -NaBur -x .git GLM-orig/win/vs-libglm/libglm+.vcxproj.filters GLM/win/vs-libglm/libglm+.vcxproj.filters
--- GLM-orig/win/vs-libglm/libglm+.vcxproj.filters	2018-11-29 19:22:05.689473746 +0800
+++ GLM/win/vs-libglm/libglm+.vcxproj.filters	2019-08-01 09:22:39.514030506 +0800
@@ -17,6 +17,9 @@
     <ClCompile Include="..\..\src\glm_bird.c">
       <Filter>Source Files</Filter>
     </ClCompile>
+    <ClCompile Include="..\..\src\glm_bubbler.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
     <ClCompile Include="..\..\src\glm_const.c">
       <Filter>Source Files</Filter>
     </ClCompile>
@@ -91,6 +94,9 @@
     <ClInclude Include="..\..\src\glm_bird.h">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="..\..\src\glm_bubbler.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="..\..\src\libplot.h">
       <Filter>Header Files</Filter>
     </ClInclude>
diff -NaBur -x .git GLM-orig/win/vs-libglm/libglm.vcxproj GLM/win/vs-libglm/libglm.vcxproj
--- GLM-orig/win/vs-libglm/libglm.vcxproj	2018-11-29 19:22:05.689473746 +0800
+++ GLM/win/vs-libglm/libglm.vcxproj	2019-08-01 09:22:58.126448450 +0800
@@ -125,6 +125,7 @@
   </ItemDefinitionGroup>
   <ItemGroup>
     <ClCompile Include="..\..\src\glm_bird.c" />
+    <ClCompile Include="..\..\src\glm_bubbler.c" />
     <ClCompile Include="..\..\src\glm_const.c" />
     <ClCompile Include="..\..\src\glm_csv.c" />
     <ClCompile Include="..\..\src\glm_debug.c" />
@@ -150,6 +151,7 @@
   <ItemGroup>
     <ClInclude Include="..\..\src\glm.h" />
     <ClInclude Include="..\..\src\glm_bird.h" />
+    <ClInclude Include="..\..\src\glm_bubbler.h" />
     <ClInclude Include="..\..\src\glm_const.h" />
     <ClInclude Include="..\..\src\glm_csv.h" />
     <ClInclude Include="..\..\src\glm_debug.h" />
diff -NaBur -x .git GLM-orig/win/vs-libglm/libglm.vcxproj.filters GLM/win/vs-libglm/libglm.vcxproj.filters
--- GLM-orig/win/vs-libglm/libglm.vcxproj.filters	2018-11-29 19:22:05.689473746 +0800
+++ GLM/win/vs-libglm/libglm.vcxproj.filters	2019-08-01 09:23:20.710955857 +0800
@@ -17,6 +17,9 @@
     <ClCompile Include="..\..\src\glm_bird.c">
       <Filter>Source Files</Filter>
     </ClCompile>
+    <ClCompile Include="..\..\src\glm_bubbler.c">
+      <Filter>Source Files</Filter>
+    </ClCompile>
     <ClCompile Include="..\..\src\glm_const.c">
       <Filter>Source Files</Filter>
     </ClCompile>
@@ -88,6 +91,9 @@
     <ClInclude Include="..\..\src\glm_bird.h">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="..\..\src\glm_bubbler.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="..\..\src\libplot.h">
       <Filter>Header Files</Filter>
     </ClInclude>
